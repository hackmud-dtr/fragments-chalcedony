{
	"_id": "anonymous_pb59cn.docs",
	"type": "fragment",
	"mode": "dead",
	"script": "anonymous_pb59cn.docs",
	"sector": "SPC_7002",
	"sec_level": 4,
	"date_added": 1584232584927,
	"last_scraped": 1588104188094,
	"script_log": [
		{
			"type": "added",
			"when": 1584232584927
		},
		[
			{
				"type": "sector change",
				"when": 1587750103121,
				"from": "SPC_7002",
				"to": "HJG_3307"
			}
		],
		{
			"type": "died",
			"when": 1596017876411
		},
		{
			"type": "died",
			"when": 1603129869622
		},
		{
			"type": "died",
			"when": 1603284151302
		},
		{
			"type": "died",
			"when": 1603434543750
		},
		{
			"type": "died",
			"when": 1603434642646
		},
		{
			"type": "died",
			"when": 1603597711089
		},
		{
			"type": "died",
			"when": 1603774474467
		},
		{
			"type": "died",
			"when": 1603939894684
		},
		{
			"type": "died",
			"when": 1604017212499
		},
		{
			"type": "died",
			"when": 1604172612378
		},
		{
			"type": "died",
			"when": 1604172623611
		},
		{
			"type": "died",
			"when": 1607134720682
		},
		{
			"type": "died",
			"when": 1607276475243
		},
		{
			"type": "died",
			"when": 1607447436906
		},
		{
			"type": "died",
			"when": 1607447532260
		},
		{
			"type": "died",
			"when": 1607448415208
		},
		{
			"type": "died",
			"when": 1608925453008
		},
		{
			"type": "died",
			"when": 1609165709899
		},
		{
			"type": "died",
			"when": 1609387844235
		},
		{
			"type": "died",
			"when": 1609639526034
		},
		{
			"type": "died",
			"when": 1609908294705
		},
		{
			"type": "died",
			"when": 1617291633650
		},
		{
			"type": "died",
			"when": 1622510985114
		},
		{
			"type": "died",
			"when": 1622511007796
		},
		{
			"type": "died",
			"when": 1625436508927
		}
	],
	"pl_output": "\n    \nfunction(c,a)\n{\n\nlet U = {};\n\n// /**\n// * Documentation Starter\n// *\n// * @function         printDocs()\n// * @description      This function scrubs a file for *all*\n                       docstrings prefixed with a double forward \n                       slash and prints them. Does not take char\n                       count.\n// * @param\n// * @example\n// *\n// *     print_docs() \n// */\n\nU.printDocs = () =>\n{\n    let s = `C#fs`.scripts.quine(),o = ``,m,r = /\\/\\*\\*\\s*\\n([^\\*]|(\\*(?!\\/)))*\\*(?:\\/)/gim;\n    while ((m = r.exec(s))) o += `\\n\\n${m[0]}`;\n    return o.replace(/\\/(?:\\/)/g, '')\n}\n\nreturn {ok: true, msg: U.printDocs()}\n\n}\n",
	"next_scrape": 1588146962210,
	"updt": 1622530279398,
	"edit": 1197,
	"category": "UNKNOWN CATEGORY",
	"last_update": 1588104188094,
	"output": [
		{
			"args": {},
			"calls": 7665477,
			"base": "\n    \nfunction(c,a)\n{\n\nlet U = {};\n\n// /**\n// * Documentation Starter\n// *\n// * @function         printDocs()\n// * @description      This function scrubs a file for *all*\n                       docstrings prefixed with a double forward \n                       slash and prints them. Does not take char\n                       count.\n// * @param\n// * @example\n// *\n// *     print_docs() \n// */\n\nU.printDocs = () =>\n{\n    let s = `C#fs`.scripts.quine(),o = ``,m,r = /\\/\\*\\*\\s*\\n([^\\*]|(\\*(?!\\/)))*\\*(?:\\/)/gim;\n    while ((m = r.exec(s))) o += `\\n\\n${m[0]}`;\n    return o.replace(/\\/(?:\\/)/g, '')\n}\n\nreturn {ok: true, msg: U.printDocs()}\n\n}\n",
			"fragments": [
				"| SUB",
				"i-tea",
				"TIME ",
				"ROG ER",
				"OR | P",
				"| USER ",
				"team | S",
				"ROR | TI",
				"R | USER"
			],
			"hits": [
				{
					"document": "MFT0X3F_CLST0X0A_SECT0X8F99_FILE0XBD88122E",
					"frags": [
						"| SUB",
						"i-tea",
						"TIME ",
						"ROG ER",
						"OR | P",
						"| USER ",
						"team | S",
						"ROR | TI",
						"R | USER"
					]
				}
			]
		}
	],
	"identified": [
		{
			"document": "MFT0X3F_CLST0X0A_SECT0X8F99_FILE0XBD88122E",
			"frags": [
				"| SUB",
				"i-tea",
				"TIME ",
				"ROG ER",
				"OR | P",
				"| USER ",
				"team | S",
				"ROR | TI",
				"R | USER"
			]
		}
	]
}